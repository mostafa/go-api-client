/*
Logto API references

API references for Logto services.  Note: The documentation is for Logto Cloud. If you are using Logto OSS, please refer to the response of `/api/swagger.json` endpoint on your Logto instance.

API version: Cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package logto

import (
	"encoding/json"
)

// checks if the ApiInteractionConsentGet200ResponseApplicationBranding type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApiInteractionConsentGet200ResponseApplicationBranding{}

// ApiInteractionConsentGet200ResponseApplicationBranding struct for ApiInteractionConsentGet200ResponseApplicationBranding
type ApiInteractionConsentGet200ResponseApplicationBranding struct {
	LogoUrl *string `json:"logoUrl,omitempty"`
	DarkLogoUrl *string `json:"darkLogoUrl,omitempty"`
	Favicon *string `json:"favicon,omitempty"`
}

// NewApiInteractionConsentGet200ResponseApplicationBranding instantiates a new ApiInteractionConsentGet200ResponseApplicationBranding object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiInteractionConsentGet200ResponseApplicationBranding() *ApiInteractionConsentGet200ResponseApplicationBranding {
	this := ApiInteractionConsentGet200ResponseApplicationBranding{}
	return &this
}

// NewApiInteractionConsentGet200ResponseApplicationBrandingWithDefaults instantiates a new ApiInteractionConsentGet200ResponseApplicationBranding object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiInteractionConsentGet200ResponseApplicationBrandingWithDefaults() *ApiInteractionConsentGet200ResponseApplicationBranding {
	this := ApiInteractionConsentGet200ResponseApplicationBranding{}
	return &this
}

// GetLogoUrl returns the LogoUrl field value if set, zero value otherwise.
func (o *ApiInteractionConsentGet200ResponseApplicationBranding) GetLogoUrl() string {
	if o == nil || IsNil(o.LogoUrl) {
		var ret string
		return ret
	}
	return *o.LogoUrl
}

// GetLogoUrlOk returns a tuple with the LogoUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiInteractionConsentGet200ResponseApplicationBranding) GetLogoUrlOk() (*string, bool) {
	if o == nil || IsNil(o.LogoUrl) {
		return nil, false
	}
	return o.LogoUrl, true
}

// HasLogoUrl returns a boolean if a field has been set.
func (o *ApiInteractionConsentGet200ResponseApplicationBranding) HasLogoUrl() bool {
	if o != nil && !IsNil(o.LogoUrl) {
		return true
	}

	return false
}

// SetLogoUrl gets a reference to the given string and assigns it to the LogoUrl field.
func (o *ApiInteractionConsentGet200ResponseApplicationBranding) SetLogoUrl(v string) {
	o.LogoUrl = &v
}

// GetDarkLogoUrl returns the DarkLogoUrl field value if set, zero value otherwise.
func (o *ApiInteractionConsentGet200ResponseApplicationBranding) GetDarkLogoUrl() string {
	if o == nil || IsNil(o.DarkLogoUrl) {
		var ret string
		return ret
	}
	return *o.DarkLogoUrl
}

// GetDarkLogoUrlOk returns a tuple with the DarkLogoUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiInteractionConsentGet200ResponseApplicationBranding) GetDarkLogoUrlOk() (*string, bool) {
	if o == nil || IsNil(o.DarkLogoUrl) {
		return nil, false
	}
	return o.DarkLogoUrl, true
}

// HasDarkLogoUrl returns a boolean if a field has been set.
func (o *ApiInteractionConsentGet200ResponseApplicationBranding) HasDarkLogoUrl() bool {
	if o != nil && !IsNil(o.DarkLogoUrl) {
		return true
	}

	return false
}

// SetDarkLogoUrl gets a reference to the given string and assigns it to the DarkLogoUrl field.
func (o *ApiInteractionConsentGet200ResponseApplicationBranding) SetDarkLogoUrl(v string) {
	o.DarkLogoUrl = &v
}

// GetFavicon returns the Favicon field value if set, zero value otherwise.
func (o *ApiInteractionConsentGet200ResponseApplicationBranding) GetFavicon() string {
	if o == nil || IsNil(o.Favicon) {
		var ret string
		return ret
	}
	return *o.Favicon
}

// GetFaviconOk returns a tuple with the Favicon field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiInteractionConsentGet200ResponseApplicationBranding) GetFaviconOk() (*string, bool) {
	if o == nil || IsNil(o.Favicon) {
		return nil, false
	}
	return o.Favicon, true
}

// HasFavicon returns a boolean if a field has been set.
func (o *ApiInteractionConsentGet200ResponseApplicationBranding) HasFavicon() bool {
	if o != nil && !IsNil(o.Favicon) {
		return true
	}

	return false
}

// SetFavicon gets a reference to the given string and assigns it to the Favicon field.
func (o *ApiInteractionConsentGet200ResponseApplicationBranding) SetFavicon(v string) {
	o.Favicon = &v
}

func (o ApiInteractionConsentGet200ResponseApplicationBranding) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApiInteractionConsentGet200ResponseApplicationBranding) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.LogoUrl) {
		toSerialize["logoUrl"] = o.LogoUrl
	}
	if !IsNil(o.DarkLogoUrl) {
		toSerialize["darkLogoUrl"] = o.DarkLogoUrl
	}
	if !IsNil(o.Favicon) {
		toSerialize["favicon"] = o.Favicon
	}
	return toSerialize, nil
}

type NullableApiInteractionConsentGet200ResponseApplicationBranding struct {
	value *ApiInteractionConsentGet200ResponseApplicationBranding
	isSet bool
}

func (v NullableApiInteractionConsentGet200ResponseApplicationBranding) Get() *ApiInteractionConsentGet200ResponseApplicationBranding {
	return v.value
}

func (v *NullableApiInteractionConsentGet200ResponseApplicationBranding) Set(val *ApiInteractionConsentGet200ResponseApplicationBranding) {
	v.value = val
	v.isSet = true
}

func (v NullableApiInteractionConsentGet200ResponseApplicationBranding) IsSet() bool {
	return v.isSet
}

func (v *NullableApiInteractionConsentGet200ResponseApplicationBranding) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiInteractionConsentGet200ResponseApplicationBranding(val *ApiInteractionConsentGet200ResponseApplicationBranding) *NullableApiInteractionConsentGet200ResponseApplicationBranding {
	return &NullableApiInteractionConsentGet200ResponseApplicationBranding{value: val, isSet: true}
}

func (v NullableApiInteractionConsentGet200ResponseApplicationBranding) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiInteractionConsentGet200ResponseApplicationBranding) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

